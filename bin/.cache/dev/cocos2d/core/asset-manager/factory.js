
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/asset-manager/factory.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2020 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
  worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
  not use Cocos Creator software for developing other software or tools that's
  used for developing games. You are not granted to publish, distribute,
  sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var Bundle = require('./bundle');

var Cache = require('./cache');

var _require = require('./shared'),
    assets = _require.assets,
    bundles = _require.bundles;

var _creating = new Cache();

function createTexture(id, data, options, onComplete) {
  var out = null,
      err = null;

  try {
    out = new cc.Texture2D();
    out._nativeUrl = id;
    out._nativeAsset = data;
  } catch (e) {
    err = e;
  }

  onComplete && onComplete(err, out);
}

function createAudioClip(id, data, options, onComplete) {
  var out = new cc.AudioClip();
  out._nativeUrl = id;
  out._nativeAsset = data;
  out.duration = data.duration;
  onComplete && onComplete(null, out);
}

function createJsonAsset(id, data, options, onComplete) {
  var out = new cc.JsonAsset();
  out.json = data;
  onComplete && onComplete(null, out);
}

function createTextAsset(id, data, options, onComplete) {
  var out = new cc.TextAsset();
  out.text = data;
  onComplete && onComplete(null, out);
}

function createFont(id, data, options, onComplete) {
  var out = new cc.TTFFont();
  out._nativeUrl = id;
  out._nativeAsset = data;
  onComplete && onComplete(null, out);
}

function createBufferAsset(id, data, options, onComplete) {
  var out = new cc.BufferAsset();
  out._nativeUrl = id;
  out._nativeAsset = data;
  onComplete && onComplete(null, out);
}

function createAsset(id, data, options, onComplete) {
  var out = new cc.Asset();
  out._nativeUrl = id;
  out._nativeAsset = data;
  onComplete && onComplete(null, out);
}

function createBundle(id, data, options, onComplete) {
  var bundle = bundles.get(data.name);

  if (!bundle) {
    bundle = new Bundle();
    data.base = data.base || id + '/';
    bundle.init(data);
  }

  onComplete && onComplete(null, bundle);
}

var factory = {
  register: function register(type, handler) {
    if (typeof type === 'object') {
      cc.js.mixin(producers, type);
    } else {
      producers[type] = handler;
    }
  },
  create: function create(id, data, type, options, onComplete) {
    var func = producers[type] || producers['default'];
    var asset, creating;

    if (asset = assets.get(id)) {
      onComplete(null, asset);
    } else if (creating = _creating.get(id)) {
      creating.push(onComplete);
    } else {
      _creating.add(id, [onComplete]);

      func(id, data, options, function (err, data) {
        if (!err && data instanceof cc.Asset) {
          data._uuid = id;
          assets.add(id, data);
        }

        var callbacks = _creating.remove(id);

        for (var i = 0, l = callbacks.length; i < l; i++) {
          callbacks[i](err, data);
        }
      });
    }
  }
};
var producers = {
  // Images
  '.png': createTexture,
  '.jpg': createTexture,
  '.bmp': createTexture,
  '.jpeg': createTexture,
  '.gif': createTexture,
  '.ico': createTexture,
  '.tiff': createTexture,
  '.webp': createTexture,
  '.image': createTexture,
  '.pvr': createTexture,
  '.pkm': createTexture,
  // Audio
  '.mp3': createAudioClip,
  '.ogg': createAudioClip,
  '.wav': createAudioClip,
  '.m4a': createAudioClip,
  // Txt
  '.txt': createTextAsset,
  '.xml': createTextAsset,
  '.vsh': createTextAsset,
  '.fsh': createTextAsset,
  '.atlas': createTextAsset,
  '.tmx': createTextAsset,
  '.tsx': createTextAsset,
  '.fnt': createTextAsset,
  '.json': createJsonAsset,
  '.ExportJson': createJsonAsset,
  // font
  '.font': createFont,
  '.eot': createFont,
  '.ttf': createFont,
  '.woff': createFont,
  '.svg': createFont,
  '.ttc': createFont,
  // Binary
  '.binary': createBufferAsset,
  '.bin': createBufferAsset,
  '.dbbin': createBufferAsset,
  '.skel': createBufferAsset,
  'bundle': createBundle,
  'default': createAsset
};
module.exports = factory;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXYvY29jb3MyZC9jb3JlL2Fzc2V0LW1hbmFnZXIvZmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJCdW5kbGUiLCJyZXF1aXJlIiwiQ2FjaGUiLCJhc3NldHMiLCJidW5kbGVzIiwiX2NyZWF0aW5nIiwiY3JlYXRlVGV4dHVyZSIsImlkIiwiZGF0YSIsIm9wdGlvbnMiLCJvbkNvbXBsZXRlIiwib3V0IiwiZXJyIiwiY2MiLCJUZXh0dXJlMkQiLCJfbmF0aXZlVXJsIiwiX25hdGl2ZUFzc2V0IiwiZSIsImNyZWF0ZUF1ZGlvQ2xpcCIsIkF1ZGlvQ2xpcCIsImR1cmF0aW9uIiwiY3JlYXRlSnNvbkFzc2V0IiwiSnNvbkFzc2V0IiwianNvbiIsImNyZWF0ZVRleHRBc3NldCIsIlRleHRBc3NldCIsInRleHQiLCJjcmVhdGVGb250IiwiVFRGRm9udCIsImNyZWF0ZUJ1ZmZlckFzc2V0IiwiQnVmZmVyQXNzZXQiLCJjcmVhdGVBc3NldCIsIkFzc2V0IiwiY3JlYXRlQnVuZGxlIiwiYnVuZGxlIiwiZ2V0IiwibmFtZSIsImJhc2UiLCJpbml0IiwiZmFjdG9yeSIsInJlZ2lzdGVyIiwidHlwZSIsImhhbmRsZXIiLCJqcyIsIm1peGluIiwicHJvZHVjZXJzIiwiY3JlYXRlIiwiZnVuYyIsImFzc2V0IiwiY3JlYXRpbmciLCJwdXNoIiwiYWRkIiwiX3V1aWQiLCJjYWxsYmFja3MiLCJyZW1vdmUiLCJpIiwibCIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLFNB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KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAyMCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5jb25zdCBCdW5kbGUgPSByZXF1aXJlKCcuL2J1bmRsZScpO1xuY29uc3QgQ2FjaGUgPSByZXF1aXJlKCcuL2NhY2hlJyk7XG5jb25zdCB7IGFzc2V0cywgYnVuZGxlcyB9ID0gcmVxdWlyZSgnLi9zaGFyZWQnKTtcblxuY29uc3QgX2NyZWF0aW5nID0gbmV3IENhY2hlKCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUgKGlkLCBkYXRhLCBvcHRpb25zLCBvbkNvbXBsZXRlKSB7XG4gICAgbGV0IG91dCA9IG51bGwsIGVyciA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgb3V0ID0gbmV3IGNjLlRleHR1cmUyRCgpO1xuICAgICAgICBvdXQuX25hdGl2ZVVybCA9IGlkO1xuICAgICAgICBvdXQuX25hdGl2ZUFzc2V0ID0gZGF0YTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyID0gZTtcbiAgICB9XG4gICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKGVyciwgb3V0KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXVkaW9DbGlwIChpZCwgZGF0YSwgb3B0aW9ucywgb25Db21wbGV0ZSkge1xuICAgIGxldCBvdXQgPSBuZXcgY2MuQXVkaW9DbGlwKCk7XG4gICAgb3V0Ll9uYXRpdmVVcmwgPSBpZDtcbiAgICBvdXQuX25hdGl2ZUFzc2V0ID0gZGF0YTtcbiAgICBvdXQuZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShudWxsLCBvdXQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVKc29uQXNzZXQgKGlkLCBkYXRhLCBvcHRpb25zLCBvbkNvbXBsZXRlKSB7XG4gICAgbGV0IG91dCA9IG5ldyBjYy5Kc29uQXNzZXQoKTtcbiAgICBvdXQuanNvbiA9IGRhdGE7XG4gICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKG51bGwsIG91dCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRBc3NldCAoaWQsIGRhdGEsIG9wdGlvbnMsIG9uQ29tcGxldGUpIHtcbiAgICBsZXQgb3V0ID0gbmV3IGNjLlRleHRBc3NldCgpO1xuICAgIG91dC50ZXh0ID0gZGF0YTtcbiAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUobnVsbCwgb3V0KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9udCAoaWQsIGRhdGEsIG9wdGlvbnMsIG9uQ29tcGxldGUpIHtcbiAgICBsZXQgb3V0ID0gbmV3IGNjLlRURkZvbnQoKTtcbiAgICBvdXQuX25hdGl2ZVVybCA9IGlkO1xuICAgIG91dC5fbmF0aXZlQXNzZXQgPSBkYXRhO1xuICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShudWxsLCBvdXQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXJBc3NldCAoaWQsIGRhdGEsIG9wdGlvbnMsIG9uQ29tcGxldGUpIHtcbiAgICBsZXQgb3V0ID0gbmV3IGNjLkJ1ZmZlckFzc2V0KCk7XG4gICAgb3V0Ll9uYXRpdmVVcmwgPSBpZDtcbiAgICBvdXQuX25hdGl2ZUFzc2V0ID0gZGF0YTtcbiAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUobnVsbCwgb3V0KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXNzZXQgKGlkLCBkYXRhLCBvcHRpb25zLCBvbkNvbXBsZXRlKSB7XG4gICAgbGV0IG91dCA9IG5ldyBjYy5Bc3NldCgpO1xuICAgIG91dC5fbmF0aXZlVXJsID0gaWQ7XG4gICAgb3V0Ll9uYXRpdmVBc3NldCA9IGRhdGE7XG4gICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKG51bGwsIG91dCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1bmRsZSAoaWQsIGRhdGEsIG9wdGlvbnMsIG9uQ29tcGxldGUpIHtcbiAgICBsZXQgYnVuZGxlID0gYnVuZGxlcy5nZXQoZGF0YS5uYW1lKTtcbiAgICBpZiAoIWJ1bmRsZSkge1xuICAgICAgICBidW5kbGUgPSBuZXcgQnVuZGxlKCk7XG4gICAgICAgIGRhdGEuYmFzZSA9IGRhdGEuYmFzZSB8fCBpZCArICcvJztcbiAgICAgICAgYnVuZGxlLmluaXQoZGF0YSk7XG4gICAgfVxuICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShudWxsLCBidW5kbGUpO1xufVxuXG5jb25zdCBmYWN0b3J5ID0ge1xuXG4gICAgcmVnaXN0ZXIgKHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY2MuanMubWl4aW4ocHJvZHVjZXJzLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb2R1Y2Vyc1t0eXBlXSA9IGhhbmRsZXI7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY3JlYXRlIChpZCwgZGF0YSwgdHlwZSwgb3B0aW9ucywgb25Db21wbGV0ZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHByb2R1Y2Vyc1t0eXBlXSB8fCBwcm9kdWNlcnNbJ2RlZmF1bHQnXTtcbiAgICAgICAgbGV0IGFzc2V0LCBjcmVhdGluZztcbiAgICAgICAgaWYgKGFzc2V0ID0gYXNzZXRzLmdldChpZCkpIHtcbiAgICAgICAgICAgIG9uQ29tcGxldGUobnVsbCwgYXNzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNyZWF0aW5nID0gX2NyZWF0aW5nLmdldChpZCkpIHtcbiAgICAgICAgICAgIGNyZWF0aW5nLnB1c2gob25Db21wbGV0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfY3JlYXRpbmcuYWRkKGlkLCBbb25Db21wbGV0ZV0pO1xuICAgICAgICAgICAgZnVuYyhpZCwgZGF0YSwgb3B0aW9ucywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmICghZXJyICYmIGRhdGEgaW5zdGFuY2VvZiBjYy5Bc3NldCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLl91dWlkID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5hZGQoaWQsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgY2FsbGJhY2tzID0gX2NyZWF0aW5nLnJlbW92ZShpZCk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tpXShlcnIsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuY29uc3QgcHJvZHVjZXJzID0ge1xuICAgIC8vIEltYWdlc1xuICAgICcucG5nJyA6IGNyZWF0ZVRleHR1cmUsXG4gICAgJy5qcGcnIDogY3JlYXRlVGV4dHVyZSxcbiAgICAnLmJtcCcgOiBjcmVhdGVUZXh0dXJlLFxuICAgICcuanBlZycgOiBjcmVhdGVUZXh0dXJlLFxuICAgICcuZ2lmJyA6IGNyZWF0ZVRleHR1cmUsXG4gICAgJy5pY28nIDogY3JlYXRlVGV4dHVyZSxcbiAgICAnLnRpZmYnIDogY3JlYXRlVGV4dHVyZSxcbiAgICAnLndlYnAnIDogY3JlYXRlVGV4dHVyZSxcbiAgICAnLmltYWdlJyA6IGNyZWF0ZVRleHR1cmUsXG4gICAgJy5wdnInOiBjcmVhdGVUZXh0dXJlLFxuICAgICcucGttJzogY3JlYXRlVGV4dHVyZSxcblxuICAgIC8vIEF1ZGlvXG4gICAgJy5tcDMnIDogY3JlYXRlQXVkaW9DbGlwLFxuICAgICcub2dnJyA6IGNyZWF0ZUF1ZGlvQ2xpcCxcbiAgICAnLndhdicgOiBjcmVhdGVBdWRpb0NsaXAsXG4gICAgJy5tNGEnIDogY3JlYXRlQXVkaW9DbGlwLFxuXG4gICAgLy8gVHh0XG4gICAgJy50eHQnIDogY3JlYXRlVGV4dEFzc2V0LFxuICAgICcueG1sJyA6IGNyZWF0ZVRleHRBc3NldCxcbiAgICAnLnZzaCcgOiBjcmVhdGVUZXh0QXNzZXQsXG4gICAgJy5mc2gnIDogY3JlYXRlVGV4dEFzc2V0LFxuICAgICcuYXRsYXMnIDogY3JlYXRlVGV4dEFzc2V0LFxuXG4gICAgJy50bXgnIDogY3JlYXRlVGV4dEFzc2V0LFxuICAgICcudHN4JyA6IGNyZWF0ZVRleHRBc3NldCxcbiAgICAnLmZudCcgOiBjcmVhdGVUZXh0QXNzZXQsXG5cbiAgICAnLmpzb24nIDogY3JlYXRlSnNvbkFzc2V0LFxuICAgICcuRXhwb3J0SnNvbicgOiBjcmVhdGVKc29uQXNzZXQsXG5cbiAgICAvLyBmb250XG4gICAgJy5mb250JyA6IGNyZWF0ZUZvbnQsXG4gICAgJy5lb3QnIDogY3JlYXRlRm9udCxcbiAgICAnLnR0ZicgOiBjcmVhdGVGb250LFxuICAgICcud29mZicgOiBjcmVhdGVGb250LFxuICAgICcuc3ZnJyA6IGNyZWF0ZUZvbnQsXG4gICAgJy50dGMnIDogY3JlYXRlRm9udCxcblxuICAgIC8vIEJpbmFyeVxuICAgICcuYmluYXJ5JzogY3JlYXRlQnVmZmVyQXNzZXQsXG4gICAgJy5iaW4nOiBjcmVhdGVCdWZmZXJBc3NldCxcbiAgICAnLmRiYmluJzogY3JlYXRlQnVmZmVyQXNzZXQsXG4gICAgJy5za2VsJzogY3JlYXRlQnVmZmVyQXNzZXQsXG5cbiAgICAnYnVuZGxlJzogY3JlYXRlQnVuZGxlLFxuXG4gICAgJ2RlZmF1bHQnOiBjcmVhdGVBc3NldFxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG4iXSwic291cmNlUm9vdCI6Ii8ifQ==