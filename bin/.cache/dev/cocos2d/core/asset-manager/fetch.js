
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/asset-manager/fetch.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2019 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
  worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
  not use Cocos Creator software for developing other software or tools that's
  used for developing games. You are not granted to publish, distribute,
  sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var packManager = require('./pack-manager');

var Task = require('./task');

var _require = require('./utilities'),
    getDepends = _require.getDepends,
    clear = _require.clear,
    forEach = _require.forEach;

var _require2 = require('./shared'),
    assets = _require2.assets,
    fetchPipeline = _require2.fetchPipeline;

function fetch(task, done) {
  var firstTask = false;

  if (!task.progress) {
    task.progress = {
      finish: 0,
      total: task.input.length,
      canInvoke: true
    };
    firstTask = true;
  }

  var options = task.options,
      depends = [],
      progress = task.progress,
      total = progress.total;
  options.__exclude__ = options.__exclude__ || Object.create(null);
  task.output = [];
  forEach(task.input, function (item, cb) {
    if (!item.isNative && assets.has(item.uuid)) {
      var asset = assets.get(item.uuid);
      asset.addRef();
      handle(item, task, asset, null, asset.__asyncLoadAssets__, depends, total, done);
      return cb();
    }

    packManager.load(item, task.options, function (err, data) {
      if (err) {
        if (!task.isFinish) {
          if (!cc.assetManager.force || firstTask) {
            cc.error(err.message, err.stack);
            progress.canInvoke = false;
            done(err);
          } else {
            handle(item, task, null, null, false, depends, total, done);
          }
        }
      } else {
        if (!task.isFinish) handle(item, task, null, data, !item.isNative, depends, total, done);
      }

      cb();
    });
  }, function () {
    if (task.isFinish) {
      clear(task, true);
      return task.dispatch('error');
    }

    if (depends.length > 0) {
      // stage 2 , download depend asset
      var subTask = Task.create({
        name: task.name + ' dependencies',
        input: depends,
        progress: progress,
        options: options,
        onProgress: task.onProgress,
        onError: Task.prototype.recycle,
        onComplete: function onComplete(err) {
          if (!err) {
            task.output.push.apply(task.output, this.output);
            subTask.recycle();
          }

          if (firstTask) decreaseRef(task);
          done(err);
        }
      });
      fetchPipeline.async(subTask);
      return;
    }

    if (firstTask) decreaseRef(task);
    done();
  });
}

function decreaseRef(task) {
  var output = task.output;

  for (var i = 0, l = output.length; i < l; i++) {
    output[i].content && output[i].content.decRef(false);
  }
}

function handle(item, task, content, file, loadDepends, depends, last, done) {
  var exclude = task.options.__exclude__;
  var progress = task.progress;
  item.content = content;
  item.file = file;
  task.output.push(item);

  if (loadDepends) {
    exclude[item.uuid] = true;
    getDepends(item.uuid, file || content, exclude, depends, true, false, item.config);
    progress.total = last + depends.length;
  }

  progress.canInvoke && task.dispatch('progress', ++progress.finish, progress.total, item);
}

module.exports = fetch;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,