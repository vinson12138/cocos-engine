
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/asset-manager/config.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2019 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
  worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
  not use Cocos Creator software for developing other software or tools that's
  used for developing games. You are not granted to publish, distribute,
  sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var js = require('../platform/js');

var Cache = require('./cache');

var _require = require('./helper'),
    normalize = _require.normalize;

var _require2 = require('./utilities'),
    processOptions = _require2.processOptions;

function Config() {
  this.name = '';
  this.base = '';
  this.importBase = '';
  this.nativeBase = '';
  this.deps = null;
  this.assetInfos = new Cache();
  this.scenes = new Cache();
  this.paths = new Cache();
}

Config.prototype = {
  constructor: Config,
  init: function init(options) {
    processOptions(options);
    this.importBase = options.importBase || '';
    this.nativeBase = options.nativeBase || '';
    this.base = options.base || '';
    this.name = options.name || '';
    this.deps = options.deps || []; // init

    this._initUuid(options.uuids);

    this._initPath(options.paths);

    this._initScene(options.scenes);

    this._initPackage(options.packs);

    this._initVersion(options.versions);

    this._initRedirect(options.redirect);
  },
  _initUuid: function _initUuid(uuidList) {
    if (!uuidList) return;
    this.assetInfos.clear();

    for (var i = 0, l = uuidList.length; i < l; i++) {
      var uuid = uuidList[i];
      this.assetInfos.add(uuid, {
        uuid: uuid
      });
    }
  },
  _initPath: function _initPath(pathList) {
    if (!pathList) return;
    var paths = this.paths;
    paths.clear();

    for (var uuid in pathList) {
      var info = pathList[uuid];
      var path = info[0];
      var type = info[1];
      var isSubAsset = info.length === 3;
      var assetInfo = this.assetInfos.get(uuid);
      assetInfo.path = path;
      assetInfo.ctor = js._getClassById(type);

      if (paths.has(path)) {
        if (isSubAsset) {
          paths.get(path).push(assetInfo);
        } else {
          paths.get(path).splice(0, 0, assetInfo);
        }
      } else {
        paths.add(path, [assetInfo]);
      }
    }
  },
  _initScene: function _initScene(sceneList) {
    if (!sceneList) return;
    var scenes = this.scenes;
    scenes.clear();
    var assetInfos = this.assetInfos;

    for (var sceneName in sceneList) {
      var uuid = sceneList[sceneName];
      var assetInfo = assetInfos.get(uuid);
      assetInfo.url = sceneName;
      scenes.add(sceneName, assetInfo);
    }
  },
  _initPackage: function _initPackage(packageList) {
    if (!packageList) return;
    var assetInfos = this.assetInfos;

    for (var packUuid in packageList) {
      var uuids = packageList[packUuid];
      var pack = {
        uuid: packUuid,
        packs: uuids,
        ext: '.json'
      };
      assetInfos.add(packUuid, pack);

      for (var i = 0, l = uuids.length; i < l; i++) {
        var uuid = uuids[i];
        var assetInfo = assetInfos.get(uuid);
        var assetPacks = assetInfo.packs;

        if (assetPacks) {
          if (l === 1) {
            assetPacks.splice(0, 0, pack);
          } else {
            assetPacks.push(pack);
          }
        } else {
          assetInfo.packs = [pack];
        }
      }
    }
  },
  _initVersion: function _initVersion(versions) {
    if (!versions) return;
    var assetInfos = this.assetInfos;
    var entries = versions["import"];

    if (entries) {
      for (var i = 0, l = entries.length; i < l; i += 2) {
        var uuid = entries[i];
        var assetInfo = assetInfos.get(uuid);
        assetInfo.ver = entries[i + 1];
      }
    }

    entries = versions["native"];

    if (entries) {
      for (var i = 0, l = entries.length; i < l; i += 2) {
        var uuid = entries[i];
        var assetInfo = assetInfos.get(uuid);
        assetInfo.nativeVer = entries[i + 1];
      }
    }
  },
  _initRedirect: function _initRedirect(redirect) {
    if (!redirect) return;
    var assetInfos = this.assetInfos;

    for (var i = 0, l = redirect.length; i < l; i += 2) {
      var uuid = redirect[i];
      var assetInfo = assetInfos.get(uuid);
      assetInfo.redirect = redirect[i + 1];
    }
  },
  getInfoWithPath: function getInfoWithPath(path, type) {
    if (!path) {
      return null;
    }

    path = normalize(path);
    var items = this.paths.get(path);

    if (items) {
      if (type) {
        for (var i = 0, l = items.length; i < l; i++) {
          var assetInfo = items[i];

          if (js.isChildClassOf(assetInfo.ctor, type)) {
            return assetInfo;
          }
        }
      } else {
        return items[0];
      }
    }

    return null;
  },
  getDirWithPath: function getDirWithPath(path, type, out) {
    path = normalize(path);

    if (path[path.length - 1] === '/') {
      path = path.slice(0, -1);
    }

    var infos = out || [];

    function isMatchByWord(path, test) {
      if (path.length > test.length) {
        var nextAscii = path.charCodeAt(test.length);
        return nextAscii === 47; // '/'
      }

      return true;
    }

    this.paths.forEach(function (items, p) {
      if (p.startsWith(path) && isMatchByWord(p, path) || !path) {
        for (var i = 0, l = items.length; i < l; i++) {
          var entry = items[i];

          if (!type || js.isChildClassOf(entry.ctor, type)) {
            infos.push(entry);
          }
        }
      }
    });
    return infos;
  },
  getAssetInfo: function getAssetInfo(uuid) {
    return this.assetInfos.get(uuid);
  },
  getSceneInfo: function getSceneInfo(name) {
    if (!name.endsWith('.fire')) {
      name += '.fire';
    }

    if (name[0] !== '/' && !name.startsWith('db://')) {
      name = '/' + name; // 使用全名匹配
    } // search scene


    var info = this.scenes.find(function (val, key) {
      return key.endsWith(name);
    });
    return info;
  },
  destroy: function destroy() {
    this.paths.destroy();
    this.scenes.destroy();
    this.assetInfos.destroy();
  }
};

if (CC_TEST) {
  cc._Test.Config = Config;
}

module.exports = Config;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXYvY29jb3MyZC9jb3JlL2Fzc2V0LW1hbmFnZXIvY29uZmlnLmpzIl0sIm5hbWVzIjpbImpzIiwicmVxdWlyZSIsIkNhY2hlIiwibm9ybWFsaXplIiwicHJvY2Vzc09wdGlvbnMiLCJDb25maWciLCJuYW1lIiwiYmFzZSIsImltcG9ydEJhc2UiLCJuYXRpdmVCYXNlIiwiZGVwcyIsImFzc2V0SW5mb3MiLCJzY2VuZXMiLCJwYXRocyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiaW5pdCIsIm9wdGlvbnMiLCJfaW5pdFV1aWQiLCJ1dWlkcyIsIl9pbml0UGF0aCIsIl9pbml0U2NlbmUiLCJfaW5pdFBhY2thZ2UiLCJwYWNrcyIsIl9pbml0VmVyc2lvbiIsInZlcnNpb25zIiwiX2luaXRSZWRpcmVjdCIsInJlZGlyZWN0IiwidXVpZExpc3QiLCJjbGVhciIsImkiLCJsIiwibGVuZ3RoIiwidXVpZCIsImFkZCIsInBhdGhMaXN0IiwiaW5mbyIsInBhdGgiLCJ0eXBlIiwiaXNTdWJBc3NldCIsImFzc2V0SW5mbyIsImdldCIsImN0b3IiLCJfZ2V0Q2xhc3NCeUlkIiwiaGFzIiwicHVzaCIsInNwbGljZSIsInNjZW5lTGlzdCIsInNjZW5lTmFtZSIsInVybCIsInBhY2thZ2VMaXN0IiwicGFja1V1aWQiLCJwYWNrIiwiZXh0IiwiYXNzZXRQYWNrcyIsImVudHJpZXMiLCJ2ZXIiLCJuYXRpdmVWZXIiLCJnZXRJbmZvV2l0aFBhdGgiLCJpdGVtcyIsImlzQ2hpbGRDbGFzc09mIiwiZ2V0RGlyV2l0aFBhdGgiLCJvdXQiLCJzbGljZSIsImluZm9zIiwiaXNNYXRjaEJ5V29yZCIsInRlc3QiLCJuZXh0QXNjaWkiLCJjaGFyQ29kZUF0IiwiZm9yRWFjaCIsInAiLCJzdGFydHNXaXRoIiwiZW50cnkiLCJnZXRBc3NldEluZm8iLCJnZXRTY2VuZUluZm8iLCJlbmRzV2l0aCIsImZpbmQiLCJ2YWwiLCJrZXkiLCJkZXN0cm95IiwiQ0NfVEVTVCIsImNj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TCxDQUFZZ0UsSUFBWixDQUFpQixVQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDNUMsYUFBT0EsR0FBRyxDQUFDSCxRQUFKLENBQWFyRSxJQUFiLENBQVA7QUFDSCxLQUZVLENBQVg7QUFHQSxXQUFPOEIsSUFBUDtBQUNILEdBbk1jO0FBcU1mMkMsRUFBQUEsT0FBTyxFQUFFLG1CQUFZO0FBQ2pCLFNBQUtsRSxLQUFMLENBQVdrRSxPQUFYO0FBQ0EsU0FBS25FLE1BQUwsQ0FBWW1FLE9BQVo7QUFDQSxTQUFLcEUsVUFBTCxDQUFnQm9FLE9BQWhCO0FBQ0g7QUF6TWMsQ0FBbkI7O0FBNE1BLElBQUlDLE9BQUosRUFBYTtBQUNUQyxFQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUzdFLE1BQVQsR0FBa0JBLE1BQWxCO0FBQ0g7O0FBRUQ4RSxNQUFNLENBQUNDLE9BQVAsR0FBaUIvRSxNQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE5IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmNvbnN0IGpzID0gcmVxdWlyZSgnLi4vcGxhdGZvcm0vanMnKTtcbmNvbnN0IENhY2hlID0gcmVxdWlyZSgnLi9jYWNoZScpO1xuY29uc3QgeyBub3JtYWxpemUgfSA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XG5jb25zdCB7IHByb2Nlc3NPcHRpb25zIH0gPSByZXF1aXJlKCcuL3V0aWxpdGllcycpO1xuXG5mdW5jdGlvbiBDb25maWcgKCkge1xuXG4gICAgdGhpcy5uYW1lID0gJyc7XG5cbiAgICB0aGlzLmJhc2UgPSAnJztcblxuICAgIHRoaXMuaW1wb3J0QmFzZSA9ICcnO1xuXG4gICAgdGhpcy5uYXRpdmVCYXNlID0gJyc7XG5cbiAgICB0aGlzLmRlcHMgPSBudWxsO1xuXG4gICAgdGhpcy5hc3NldEluZm9zID0gbmV3IENhY2hlKCk7XG5cbiAgICB0aGlzLnNjZW5lcyA9IG5ldyBDYWNoZSgpO1xuXG4gICAgdGhpcy5wYXRocyA9IG5ldyBDYWNoZSgpO1xufVxuXG5Db25maWcucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3I6IENvbmZpZyxcblxuICAgIGluaXQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHByb2Nlc3NPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuaW1wb3J0QmFzZSA9IG9wdGlvbnMuaW1wb3J0QmFzZSB8fCAnJztcbiAgICAgICAgdGhpcy5uYXRpdmVCYXNlID0gb3B0aW9ucy5uYXRpdmVCYXNlIHx8ICcnO1xuICAgICAgICB0aGlzLmJhc2UgPSBvcHRpb25zLmJhc2UgfHwgJyc7XG4gICAgICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCAnJztcbiAgICAgICAgdGhpcy5kZXBzID0gb3B0aW9ucy5kZXBzIHx8IFtdO1xuICAgICAgICAvLyBpbml0XG4gICAgICAgIHRoaXMuX2luaXRVdWlkKG9wdGlvbnMudXVpZHMpO1xuICAgICAgICB0aGlzLl9pbml0UGF0aChvcHRpb25zLnBhdGhzKTtcbiAgICAgICAgdGhpcy5faW5pdFNjZW5lKG9wdGlvbnMuc2NlbmVzKTtcbiAgICAgICAgdGhpcy5faW5pdFBhY2thZ2Uob3B0aW9ucy5wYWNrcyk7XG4gICAgICAgIHRoaXMuX2luaXRWZXJzaW9uKG9wdGlvbnMudmVyc2lvbnMpO1xuICAgICAgICB0aGlzLl9pbml0UmVkaXJlY3Qob3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgfSxcblxuICAgIF9pbml0VXVpZDogZnVuY3Rpb24gKHV1aWRMaXN0KSB7XG4gICAgICAgIGlmICghdXVpZExpc3QpIHJldHVybjtcbiAgICAgICAgdGhpcy5hc3NldEluZm9zLmNsZWFyKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdXVpZExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdXVpZCA9IHV1aWRMaXN0W2ldO1xuICAgICAgICAgICAgdGhpcy5hc3NldEluZm9zLmFkZCh1dWlkLCB7dXVpZH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9pbml0UGF0aDogZnVuY3Rpb24gKHBhdGhMaXN0KSB7XG4gICAgICAgIGlmICghcGF0aExpc3QpIHJldHVybjtcbiAgICAgICAgdmFyIHBhdGhzID0gdGhpcy5wYXRocztcbiAgICAgICAgcGF0aHMuY2xlYXIoKTtcbiAgICAgICAgZm9yICh2YXIgdXVpZCBpbiBwYXRoTGlzdCkge1xuICAgICAgICAgICAgdmFyIGluZm8gPSBwYXRoTGlzdFt1dWlkXTtcbiAgICAgICAgICAgIHZhciBwYXRoID0gaW5mb1swXTtcbiAgICAgICAgICAgIHZhciB0eXBlID0gaW5mb1sxXTtcbiAgICAgICAgICAgIHZhciBpc1N1YkFzc2V0ID0gaW5mby5sZW5ndGggPT09IDM7XG5cbiAgICAgICAgICAgIHZhciBhc3NldEluZm8gPSB0aGlzLmFzc2V0SW5mb3MuZ2V0KHV1aWQpO1xuICAgICAgICAgICAgYXNzZXRJbmZvLnBhdGggPSBwYXRoO1xuICAgICAgICAgICAgYXNzZXRJbmZvLmN0b3IgPSBqcy5fZ2V0Q2xhc3NCeUlkKHR5cGUpO1xuICAgICAgICAgICAgaWYgKHBhdGhzLmhhcyhwYXRoKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1N1YkFzc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhzLmdldChwYXRoKS5wdXNoKGFzc2V0SW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXRocy5nZXQocGF0aCkuc3BsaWNlKDAsIDAsIGFzc2V0SW5mbyk7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGhzLmFkZChwYXRoLCBbYXNzZXRJbmZvXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luaXRTY2VuZTogZnVuY3Rpb24gKHNjZW5lTGlzdCkge1xuICAgICAgICBpZiAoIXNjZW5lTGlzdCkgcmV0dXJuO1xuICAgICAgICB2YXIgc2NlbmVzID0gdGhpcy5zY2VuZXM7XG4gICAgICAgIHNjZW5lcy5jbGVhcigpO1xuICAgICAgICB2YXIgYXNzZXRJbmZvcyA9IHRoaXMuYXNzZXRJbmZvcztcbiAgICAgICAgZm9yICh2YXIgc2NlbmVOYW1lIGluIHNjZW5lTGlzdCkge1xuICAgICAgICAgICAgdmFyIHV1aWQgPSBzY2VuZUxpc3Rbc2NlbmVOYW1lXTtcbiAgICAgICAgICAgIHZhciBhc3NldEluZm8gPSBhc3NldEluZm9zLmdldCh1dWlkKTtcbiAgICAgICAgICAgIGFzc2V0SW5mby51cmwgPSBzY2VuZU5hbWU7XG4gICAgICAgICAgICBzY2VuZXMuYWRkKHNjZW5lTmFtZSwgYXNzZXRJbmZvKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdFBhY2thZ2U6IGZ1bmN0aW9uIChwYWNrYWdlTGlzdCkge1xuICAgICAgICBpZiAoIXBhY2thZ2VMaXN0KSByZXR1cm47XG4gICAgICAgIHZhciBhc3NldEluZm9zID0gdGhpcy5hc3NldEluZm9zO1xuICAgICAgICBmb3IgKHZhciBwYWNrVXVpZCBpbiBwYWNrYWdlTGlzdCkge1xuICAgICAgICAgICAgdmFyIHV1aWRzID0gcGFja2FnZUxpc3RbcGFja1V1aWRdO1xuICAgICAgICAgICAgdmFyIHBhY2sgPSB7dXVpZDogcGFja1V1aWQsIHBhY2tzOiB1dWlkcywgZXh0OicuanNvbid9O1xuICAgICAgICAgICAgYXNzZXRJbmZvcy5hZGQocGFja1V1aWQsIHBhY2spO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHV1aWRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB1dWlkID0gdXVpZHNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGFzc2V0SW5mbyA9IGFzc2V0SW5mb3MuZ2V0KHV1aWQpO1xuICAgICAgICAgICAgICAgIHZhciBhc3NldFBhY2tzID0gYXNzZXRJbmZvLnBhY2tzO1xuICAgICAgICAgICAgICAgIGlmIChhc3NldFBhY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NldFBhY2tzLnNwbGljZSgwLCAwLCBwYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0UGFja3MucHVzaChwYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRJbmZvLnBhY2tzID0gW3BhY2tdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdFZlcnNpb246IGZ1bmN0aW9uICh2ZXJzaW9ucykge1xuICAgICAgICBpZiAoIXZlcnNpb25zKSByZXR1cm47XG4gICAgICAgIHZhciBhc3NldEluZm9zID0gdGhpcy5hc3NldEluZm9zO1xuICAgICAgICB2YXIgZW50cmllcyA9IHZlcnNpb25zLmltcG9ydDtcbiAgICAgICAgaWYgKGVudHJpZXMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZW50cmllcy5sZW5ndGg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXVpZCA9IGVudHJpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGFzc2V0SW5mbyA9IGFzc2V0SW5mb3MuZ2V0KHV1aWQpO1xuICAgICAgICAgICAgICAgIGFzc2V0SW5mby52ZXIgPSBlbnRyaWVzW2kgKyAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzID0gdmVyc2lvbnMubmF0aXZlO1xuICAgICAgICBpZiAoZW50cmllcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbnRyaWVzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIHZhciB1dWlkID0gZW50cmllc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgYXNzZXRJbmZvID0gYXNzZXRJbmZvcy5nZXQodXVpZCk7XG4gICAgICAgICAgICAgICAgYXNzZXRJbmZvLm5hdGl2ZVZlciA9IGVudHJpZXNbaSArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9pbml0UmVkaXJlY3Q6IGZ1bmN0aW9uIChyZWRpcmVjdCkge1xuICAgICAgICBpZiAoIXJlZGlyZWN0KSByZXR1cm47XG4gICAgICAgIHZhciBhc3NldEluZm9zID0gdGhpcy5hc3NldEluZm9zO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJlZGlyZWN0Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMikge1xuICAgICAgICAgICAgdmFyIHV1aWQgPSByZWRpcmVjdFtpXTtcbiAgICAgICAgICAgIHZhciBhc3NldEluZm8gPSBhc3NldEluZm9zLmdldCh1dWlkKTtcbiAgICAgICAgICAgIGFzc2V0SW5mby5yZWRpcmVjdCA9IHJlZGlyZWN0W2kgKyAxXTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRJbmZvV2l0aFBhdGg6IGZ1bmN0aW9uIChwYXRoLCB0eXBlKSB7XG5cbiAgICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwYXRoID0gbm9ybWFsaXplKHBhdGgpO1xuICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLnBhdGhzLmdldChwYXRoKTtcbiAgICAgICAgaWYgKGl0ZW1zKSB7XG4gICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldEluZm8gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpzLmlzQ2hpbGRDbGFzc09mKGFzc2V0SW5mby5jdG9yLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFzc2V0SW5mbztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgZ2V0RGlyV2l0aFBhdGg6IGZ1bmN0aW9uIChwYXRoLCB0eXBlLCBvdXQpIHtcbiAgICAgICAgcGF0aCA9IG5vcm1hbGl6ZShwYXRoKTtcbiAgICAgICAgaWYgKHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5mb3MgPSBvdXQgfHwgW107XG4gICAgICAgIGZ1bmN0aW9uIGlzTWF0Y2hCeVdvcmQgKHBhdGgsIHRlc3QpIHtcbiAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA+IHRlc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRBc2NpaSA9IHBhdGguY2hhckNvZGVBdCh0ZXN0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRBc2NpaSA9PT0gNDc7IC8vICcvJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXRocy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtcywgcCkge1xuICAgICAgICAgICAgaWYgKChwLnN0YXJ0c1dpdGgocGF0aCkgJiYgaXNNYXRjaEJ5V29yZChwLCBwYXRoKSkgfHwgIXBhdGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0eXBlIHx8IGpzLmlzQ2hpbGRDbGFzc09mKGVudHJ5LmN0b3IsIHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGluZm9zO1xuICAgIH0sXG5cbiAgICBnZXRBc3NldEluZm86IGZ1bmN0aW9uICh1dWlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0SW5mb3MuZ2V0KHV1aWQpO1xuICAgIH0sXG5cbiAgICBnZXRTY2VuZUluZm86IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGlmICghbmFtZS5lbmRzV2l0aCgnLmZpcmUnKSkge1xuICAgICAgICAgICAgbmFtZSArPSAnLmZpcmUnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lWzBdICE9PSAnLycgJiYgIW5hbWUuc3RhcnRzV2l0aCgnZGI6Ly8nKSkge1xuICAgICAgICAgICAgbmFtZSA9ICcvJyArIG5hbWU7ICAgIC8vIOS9v+eUqOWFqOWQjeWMuemFjVxuICAgICAgICB9XG4gICAgICAgIC8vIHNlYXJjaCBzY2VuZVxuICAgICAgICB2YXIgaW5mbyA9IHRoaXMuc2NlbmVzLmZpbmQoZnVuY3Rpb24gKHZhbCwga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5LmVuZHNXaXRoKG5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgfSxcblxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXRocy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuc2NlbmVzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5hc3NldEluZm9zLmRlc3Ryb3koKTtcbiAgICB9XG59O1xuXG5pZiAoQ0NfVEVTVCkge1xuICAgIGNjLl9UZXN0LkNvbmZpZyA9IENvbmZpZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25maWc7Il0sInNvdXJjZVJvb3QiOiIvIn0=