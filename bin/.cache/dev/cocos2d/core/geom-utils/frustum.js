
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/geom-utils/frustum.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _valueTypes = require("../value-types");

var _enums = _interopRequireDefault(require("./enums"));

var _plane = _interopRequireDefault(require("./plane"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _v = new Array(8);

_v[0] = new _valueTypes.Vec3(1, 1, 1);
_v[1] = new _valueTypes.Vec3(-1, 1, 1);
_v[2] = new _valueTypes.Vec3(-1, -1, 1);
_v[3] = new _valueTypes.Vec3(1, -1, 1);
_v[4] = new _valueTypes.Vec3(1, 1, -1);
_v[5] = new _valueTypes.Vec3(-1, 1, -1);
_v[6] = new _valueTypes.Vec3(-1, -1, -1);
_v[7] = new _valueTypes.Vec3(1, -1, -1);
/**
 * !#en frustum
 * !#zh 平截头体
 * @class geomUtils.Frustum
 */

var frustum = /*#__PURE__*/function () {
  /**
   * create a new frustum
   * @method create
   * @static
   * @return {Frustum}
   */
  frustum.create = function create() {
    return new frustum();
  }
  /**
   * Clone a frustum
   * @method clone
   * @param {Frustum} f
   * @static
   * @return {Frustum}
   */
  ;

  frustum.clone = function clone(f) {
    return frustum.copy(new frustum(), f);
  }
  /**
   * Copy the values from one frustum to another
   * @method copy
   * @param {Frustum} out
   * @param {Frustum} f
   * @return {Frustum}
   */
  ;

  frustum.copy = function copy(out, f) {
    out._type = f._type;

    for (var i = 0; i < 6; ++i) {
      _plane["default"].copy(out.planes[i], f.planes[i]);
    }

    for (var _i = 0; _i < 8; ++_i) {
      _valueTypes.Vec3.copy(out.vertices[_i], f.vertices[_i]);
    }

    return out;
  }
  /**
   * @property {Plane[]} planes
   */
  ;

  function frustum() {
    this.planes = void 0;
    this.vertices = void 0;
    this._type = void 0;
    this._type = _enums["default"].SHAPE_FRUSTUM;
    this.planes = new Array(6);

    for (var i = 0; i < 6; ++i) {
      this.planes[i] = _plane["default"].create(0, 0, 0, 0);
    }

    this.vertices = new Array(8);

    for (var _i2 = 0; _i2 < 8; ++_i2) {
      this.vertices[_i2] = new _valueTypes.Vec3();
    }
  }
  /**
   * !#en Update the frustum information according to the given transform matrix.
   * Note that the resulting planes are not normalized under normal mode.
   * @method update
   * @param {Mat4} m the view-projection matrix
   * @param {Mat4} inv the inverse view-projection matrix
   */


  var _proto = frustum.prototype;

  _proto.update = function update(m, inv) {
    // RTR4, ch. 22.14.1, p. 983
    // extract frustum planes from view-proj matrix.
    var mm = m.m; // left plane

    _valueTypes.Vec3.set(this.planes[0].n, mm[3] + mm[0], mm[7] + mm[4], mm[11] + mm[8]);

    this.planes[0].d = -(mm[15] + mm[12]); // right plane

    _valueTypes.Vec3.set(this.planes[1].n, mm[3] - mm[0], mm[7] - mm[4], mm[11] - mm[8]);

    this.planes[1].d = -(mm[15] - mm[12]); // bottom plane

    _valueTypes.Vec3.set(this.planes[2].n, mm[3] + mm[1], mm[7] + mm[5], mm[11] + mm[9]);

    this.planes[2].d = -(mm[15] + mm[13]); // top plane

    _valueTypes.Vec3.set(this.planes[3].n, mm[3] - mm[1], mm[7] - mm[5], mm[11] - mm[9]);

    this.planes[3].d = -(mm[15] - mm[13]); // near plane

    _valueTypes.Vec3.set(this.planes[4].n, mm[3] + mm[2], mm[7] + mm[6], mm[11] + mm[10]);

    this.planes[4].d = -(mm[15] + mm[14]); // far plane

    _valueTypes.Vec3.set(this.planes[5].n, mm[3] - mm[2], mm[7] - mm[6], mm[11] - mm[10]);

    this.planes[5].d = -(mm[15] - mm[14]);

    if (this._type !== _enums["default"].SHAPE_FRUSTUM_ACCURATE) {
      return;
    } // normalize planes


    for (var i = 0; i < 6; i++) {
      var pl = this.planes[i];
      var invDist = 1 / pl.n.length();

      _valueTypes.Vec3.multiplyScalar(pl.n, pl.n, invDist);

      pl.d *= invDist;
    } // update frustum vertices


    for (var _i3 = 0; _i3 < 8; _i3++) {
      _valueTypes.Vec3.transformMat4(this.vertices[_i3], _v[_i3], inv);
    }
  }
  /**
   * !#en transform by matrix
   * @method transform
   * @param {Mat4} mat
   */
  ;

  _proto.transform = function transform(mat) {
    if (this._type !== _enums["default"].SHAPE_FRUSTUM_ACCURATE) {
      return;
    }

    for (var i = 0; i < 8; i++) {
      _valueTypes.Vec3.transformMat4(this.vertices[i], this.vertices[i], mat);
    }

    _plane["default"].fromPoints(this.planes[0], this.vertices[1], this.vertices[5], this.vertices[6]);

    _plane["default"].fromPoints(this.planes[1], this.vertices[3], this.vertices[7], this.vertices[4]);

    _plane["default"].fromPoints(this.planes[2], this.vertices[6], this.vertices[7], this.vertices[3]);

    _plane["default"].fromPoints(this.planes[3], this.vertices[0], this.vertices[4], this.vertices[5]);

    _plane["default"].fromPoints(this.planes[4], this.vertices[2], this.vertices[3], this.vertices[0]);

    _plane["default"].fromPoints(this.planes[0], this.vertices[7], this.vertices[6], this.vertices[5]);
  };

  _createClass(frustum, [{
    key: "accurate",
    set:
    /**
     * Set whether to use accurate intersection testing function on this frustum
     * @property {boolean} accurate
     */
    function set(b) {
      this._type = b ? _enums["default"].SHAPE_FRUSTUM_ACCURATE : _enums["default"].SHAPE_FRUSTUM;
    }
  }]);

  return frustum;
}();

exports["default"] = frustum;

frustum.createOrtho = function () {
  var _temp_v3 = new _valueTypes.Vec3();

  return function (out, width, height, near, far, transform) {
    var halfWidth = width / 2;
    var halfHeight = height / 2;

    _valueTypes.Vec3.set(_temp_v3, halfWidth, halfHeight, near);

    _valueTypes.Vec3.transformMat4(out.vertices[0], _temp_v3, transform);

    _valueTypes.Vec3.set(_temp_v3, -halfWidth, halfHeight, near);

    _valueTypes.Vec3.transformMat4(out.vertices[1], _temp_v3, transform);

    _valueTypes.Vec3.set(_temp_v3, -halfWidth, -halfHeight, near);

    _valueTypes.Vec3.transformMat4(out.vertices[2], _temp_v3, transform);

    _valueTypes.Vec3.set(_temp_v3, halfWidth, -halfHeight, near);

    _valueTypes.Vec3.transformMat4(out.vertices[3], _temp_v3, transform);

    _valueTypes.Vec3.set(_temp_v3, halfWidth, halfHeight, far);

    _valueTypes.Vec3.transformMat4(out.vertices[4], _temp_v3, transform);

    _valueTypes.Vec3.set(_temp_v3, -halfWidth, halfHeight, far);

    _valueTypes.Vec3.transformMat4(out.vertices[5], _temp_v3, transform);

    _valueTypes.Vec3.set(_temp_v3, -halfWidth, -halfHeight, far);

    _valueTypes.Vec3.transformMat4(out.vertices[6], _temp_v3, transform);

    _valueTypes.Vec3.set(_temp_v3, halfWidth, -halfHeight, far);

    _valueTypes.Vec3.transformMat4(out.vertices[7], _temp_v3, transform);

    _plane["default"].fromPoints(out.planes[0], out.vertices[1], out.vertices[6], out.vertices[5]);

    _plane["default"].fromPoints(out.planes[1], out.vertices[3], out.vertices[4], out.vertices[7]);

    _plane["default"].fromPoints(out.planes[2], out.vertices[6], out.vertices[3], out.vertices[7]);

    _plane["default"].fromPoints(out.planes[3], out.vertices[0], out.vertices[5], out.vertices[4]);

    _plane["default"].fromPoints(out.planes[4], out.vertices[2], out.vertices[0], out.vertices[3]);

    _plane["default"].fromPoints(out.planes[0], out.vertices[7], out.vertices[5], out.vertices[6]);
  };
}();

module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,