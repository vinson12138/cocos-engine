
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/3d/physics/cannon/cannon-shared-body.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports.CannonSharedBody = void 0;

var _cannon = _interopRequireDefault(require("../../../../../external/cannon/cannon"));

var _physicsEnum = require("../framework/physics-enum");

var _util = require("../framework/util");

var _cannonUtil = require("./cannon-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LocalDirtyFlag = cc.Node._LocalDirtyFlag;
var PHYSICS_SCALE = LocalDirtyFlag.PHYSICS_SCALE;
var Quat = cc.Quat;
var Vec3 = cc.Vec3;
var fastRemoveAt = cc.js.array.fastRemoveAt;
var v3_0 = new Vec3();
var quat_0 = new Quat();
var contactsPool = [];
var CollisionEventObject = {
  type: 'collision-enter',
  selfCollider: null,
  otherCollider: null,
  contacts: []
};
/**
 * sharedbody, node : sharedbody = 1 : 1
 * static
 */

var CannonSharedBody = /*#__PURE__*/function () {
  CannonSharedBody.getSharedBody = function getSharedBody(node, wrappedWorld) {
    var key = node._id;

    if (CannonSharedBody.sharedBodiesMap.has(key)) {
      return CannonSharedBody.sharedBodiesMap.get(key);
    } else {
      var newSB = new CannonSharedBody(node, wrappedWorld);
      CannonSharedBody.sharedBodiesMap.set(node._id, newSB);
      return newSB;
    }
  };

  function CannonSharedBody(node, wrappedWorld) {
    this.node = void 0;
    this.wrappedWorld = void 0;
    this.body = new _cannon["default"].Body();
    this.shapes = [];
    this.wrappedBody = null;
    this.index = -1;
    this.ref = 0;
    this.onCollidedListener = this.onCollided.bind(this);
    this.wrappedWorld = wrappedWorld;
    this.node = node;
    this.body.material = this.wrappedWorld.world.defaultMaterial;
    this.body.addEventListener('cc-collide', this.onCollidedListener);

    this._updateGroup();

    this.node.on(cc.Node.EventType.GROUP_CHANGED, this._updateGroup, this);
  }

  var _proto = CannonSharedBody.prototype;

  _proto._updateGroup = function _updateGroup() {
    (0, _cannonUtil.groupIndexToBitMask)(this.node.groupIndex, this.body);
  };

  _proto.addShape = function addShape(v) {
    var index = this.shapes.indexOf(v);

    if (index < 0) {
      var _index = this.body.shapes.length;
      this.body.addShape(v.shape);
      this.shapes.push(v);
      v.setIndex(_index);
      var offset = this.body.shapeOffsets[_index];
      var orient = this.body.shapeOrientations[_index];
      v.setOffsetAndOrient(offset, orient);
    }
  };

  _proto.removeShape = function removeShape(v) {
    var index = this.shapes.indexOf(v);

    if (index >= 0) {
      fastRemoveAt(this.shapes, index);
      this.body.removeShape(v.shape);
      v.setIndex(-1);
    }
  };

  _proto.syncSceneToPhysics = function syncSceneToPhysics(force) {
    if (force === void 0) {
      force = false;
    }

    var node = this.node;
    var needUpdateTransform = (0, _util.worldDirty)(node);

    if (!force && !needUpdateTransform) {
      return;
    } // body world aabb need to be recalculated


    this.body.aabbNeedsUpdate = true;
    node.getWorldPosition(v3_0);
    node.getWorldRotation(quat_0);
    Vec3.copy(this.body.position, v3_0);
    Quat.copy(this.body.quaternion, quat_0);

    if (node._localMatDirty & PHYSICS_SCALE) {
      var wscale = node.__wscale;

      for (var i = 0; i < this.shapes.length; i++) {
        this.shapes[i].setScale(wscale);
      }

      (0, _cannonUtil.commitShapeUpdates)(this.body);
    }

    if (this.body.isSleeping()) {
      this.body.wakeUp();
    }
  };

  _proto.syncPhysicsToScene = function syncPhysicsToScene() {
    if (this.body.type != _physicsEnum.ERigidBodyType.STATIC && !this.body.isSleeping()) {
      Vec3.copy(v3_0, this.body.position);
      Quat.copy(quat_0, this.body.quaternion);
      this.node.setWorldPosition(v3_0);
      this.node.setWorldRotation(quat_0);
    }
  };

  _proto.destroy = function destroy() {
    this.body.removeEventListener('cc-collide', this.onCollidedListener);
    this.node.off(cc.Node.EventType.GROUP_CHANGED, this._updateGroup, this);
    CannonSharedBody.sharedBodiesMap["delete"](this.node._id);
    delete _cannon["default"].World['idToBodyMap'][this.body.id];
    this.node = null;
    this.wrappedWorld = null;
    this.body = null;
    this.shapes = null;
    this.onCollidedListener = null;
  };

  _proto.onCollided = function onCollided(event) {
    CollisionEventObject.type = event.event;
    var self = (0, _util.getWrap)(event.selfShape);
    var other = (0, _util.getWrap)(event.otherShape);

    if (self) {
      CollisionEventObject.selfCollider = self.collider;
      CollisionEventObject.otherCollider = other ? other.collider : null;
      var i = 0;

      for (i = CollisionEventObject.contacts.length; i--;) {
        contactsPool.push(CollisionEventObject.contacts.pop());
      }

      for (i = 0; i < event.contacts.length; i++) {
        var cq = event.contacts[i];

        if (contactsPool.length > 0) {
          var c = contactsPool.pop();
          Vec3.copy(c.contactA, cq.ri);
          Vec3.copy(c.contactB, cq.rj);
          Vec3.copy(c.normal, cq.ni);
          CollisionEventObject.contacts.push(c);
        } else {
          var _c = {
            contactA: Vec3.copy(new Vec3(), cq.ri),
            contactB: Vec3.copy(new Vec3(), cq.rj),
            normal: Vec3.copy(new Vec3(), cq.ni)
          };
          CollisionEventObject.contacts.push(_c);
        }
      }

      for (i = 0; i < this.shapes.length; i++) {
        var shape = this.shapes[i];
        CollisionEventObject.type = _cannonUtil.deprecatedEventMap[CollisionEventObject.type];
        shape.collider.emit(CollisionEventObject.type, CollisionEventObject); // adapt 

        CollisionEventObject.type = event.event;
        shape.collider.emit(CollisionEventObject.type, CollisionEventObject);
      }
    }
  };

  _createClass(CannonSharedBody, [{
    key: "enabled",
    set:
    /**
     * add or remove from world \
     * add, if enable \
     * remove, if disable & shapes.length == 0 & wrappedBody disable
     */
    function set(v) {
      if (v) {
        if (this.index < 0) {
          this.index = this.wrappedWorld.bodies.length;
          this.wrappedWorld.addSharedBody(this);
          var node = this.node; // body world aabb need to be recalculated

          this.body.aabbNeedsUpdate = true;
          node.getWorldPosition(v3_0);
          node.getWorldRotation(quat_0);
          var pos = this.body.position;
          pos.x = parseFloat(v3_0.x.toFixed(3));
          pos.y = parseFloat(v3_0.y.toFixed(3));
          pos.z = parseFloat(v3_0.z.toFixed(3));
          var rot = this.body.quaternion;
          rot.x = parseFloat(quat_0.x.toFixed(12));
          rot.y = parseFloat(quat_0.y.toFixed(12));
          rot.z = parseFloat(quat_0.z.toFixed(12));
          rot.w = parseFloat(quat_0.w.toFixed(12));

          if (node._localMatDirty & PHYSICS_SCALE) {
            var wscale = node.__wscale;

            for (var i = 0; i < this.shapes.length; i++) {
              this.shapes[i].setScale(wscale);
            }

            (0, _cannonUtil.commitShapeUpdates)(this.body);
          }

          if (this.body.isSleeping()) {
            this.body.wakeUp();
          }
        }
      } else {
        if (this.index >= 0) {
          var isRemove = this.shapes.length == 0 && this.wrappedBody == null || this.shapes.length == 0 && this.wrappedBody != null && !this.wrappedBody.rigidBody.enabledInHierarchy || this.shapes.length == 0 && this.wrappedBody != null && !this.wrappedBody.isEnabled;

          if (isRemove) {
            this.body.sleep(); // clear velocity etc.

            this.index = -1;
            this.wrappedWorld.removeSharedBody(this);
          }
        }
      }
    }
  }, {
    key: "reference",
    set: function set(v) {
      v ? this.ref++ : this.ref--;

      if (this.ref == 0) {
        this.destroy();
      }
    }
  }]);

  return CannonSharedBody;
}();

exports.CannonSharedBody = CannonSharedBody;
CannonSharedBody.sharedBodiesMap = new Map();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,