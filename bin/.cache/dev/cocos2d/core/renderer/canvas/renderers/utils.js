
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/utils.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var WHITE = (255 << 16) + (255 << 8) + 255;
var MAX_CANVAS_COUNT = 32;

function colorizedFrame(canvas, texture, color, sx, sy, sw, sh) {
  var image = texture._image;
  var ctx = canvas.getContext("2d");
  canvas.width = sw;
  canvas.height = sh; // Draw color

  ctx.globalCompositeOperation = 'source-over';
  ctx.fillStyle = 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';
  ctx.fillRect(0, 0, sw, sh); // Multiply color with texture

  ctx.globalCompositeOperation = 'multiply';
  ctx.drawImage(image, sx, sy, sw, sh, 0, 0, sw, sh); // Clip out transparent pixels

  ctx.globalCompositeOperation = "destination-atop";
  ctx.drawImage(image, sx, sy, sw, sh, 0, 0, sw, sh);
  return canvas;
}

var canvasMgr = {
  canvasMap: {},
  canvasUsed: {},
  canvasPool: [],
  checking: false,
  check: function check() {
    var exist = false;

    for (var key in this.canvasUsed) {
      exist = true;

      if (!this.canvasUsed[key]) {
        var canvas = this.canvasMap[key];
        canvas.width = 0;
        canvas.height = 0;

        if (this.canvasPool.length < 32) {
          this.canvasPool.push(canvas);
        }

        delete this.canvasMap[key];
        delete this.canvasUsed[key];
      } else {
        this.canvasUsed[key] = false;
      }
    }

    if (!exist) {
      cc.director.off(cc.Director.EVENT_AFTER_DRAW, this.check, this);
      this.checking = false;
    }
  },
  startCheck: function startCheck() {
    cc.director.on(cc.Director.EVENT_AFTER_DRAW, this.check, this);
    this.checking = true;
  },
  getCanvas: function getCanvas(key) {
    this.canvasUsed[key] = true;
    return this.canvasMap[key];
  },
  cacheCanvas: function cacheCanvas(canvas, key) {
    this.canvasMap[key] = canvas;
    this.canvasUsed[key] = true;

    if (!this.checking) {
      this.startCheck();
    }
  },
  dropImage: function dropImage(key) {
    if (this.canvasMap[key]) {
      delete this.canvasMap[key];
    }
  }
};
module.exports = {
  getColorizedImage: function getColorizedImage(texture, color) {
    if (!texture) return null;
    if (texture.width === 0 || texture.height === 0) return texture._image; // original image

    var cval = color._val & 0x00ffffff;

    if (cval === WHITE) {
      return texture._image;
    } // get from cache


    var key = texture.nativeUrl + cval;
    var cache = canvasMgr.getCanvas(key);

    if (!cache) {
      cache = canvasMgr.canvasPool.pop() || document.createElement("canvas");
      colorizedFrame(cache, texture, color, 0, 0, texture.width, texture.height);
      canvasMgr.cacheCanvas(cache, key);
    }

    return cache;
  },
  getFrameCache: function getFrameCache(texture, color, sx, sy, sw, sh) {
    if (!texture || !texture.nativeUrl || sx < 0 || sy < 0 || sw <= 0 || sh <= 0) {
      return null;
    }

    var key = texture.nativeUrl;
    var generate = false;
    var cval = color._val & 0x00ffffff;

    if (cval !== WHITE) {
      key += cval;
      generate = true;
    }

    if (sx !== 0 || sy !== 0 && sw !== texture.width && sh !== texture.height) {
      key += '_' + sx + '_' + sy + '_' + sw + '_' + sh;
      generate = true;
    }

    if (!generate) {
      return texture._image;
    } // get from cache


    var cache = canvasMgr.getCanvas(key);

    if (!cache) {
      cache = canvasMgr.canvasPool.pop() || document.createElement("canvas");
      colorizedFrame(cache, texture, color, sx, sy, sw, sh);
      canvasMgr.cacheCanvas(cache, key);
    }

    return cache;
  },
  dropColorizedImage: function dropColorizedImage(texture, color) {
    var key = texture.nativeUrl + (color._val & 0x00ffffff);
    canvasMgr.dropImage(key);
  }
}; // cache context data of device.

var _globalAlpha = -1;

var context = {
  setGlobalAlpha: function setGlobalAlpha(ctx, alpha) {
    if (_globalAlpha === alpha) {
      return;
    }

    _globalAlpha = alpha;
    ctx.globalAlpha = _globalAlpha;
  },
  reset: function reset() {
    _globalAlpha = -1;
  }
};
module.exports.context = context;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXYvY29jb3MyZC9jb3JlL3JlbmRlcmVyL2NhbnZhcy9yZW5kZXJlcnMvdXRpbHMuanMiXSwibmFtZXMiOlsiV0hJVEUiLCJNQVhfQ0FOVkFTX0NPVU5UIiwiY29sb3JpemVkRnJhbWUiLCJjYW52YXMiLCJ0ZXh0dXJlIiwiY29sb3IiLCJzeCIsInN5Iiwic3ciLCJzaCIsImltYWdlIiwiX2ltYWdlIiwiY3R4IiwiZ2V0Q29udGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiZmlsbFN0eWxlIiwiciIsImciLCJiIiwiZmlsbFJlY3QiLCJkcmF3SW1hZ2UiLCJjYW52YXNNZ3IiLCJjYW52YXNNYXAiLCJjYW52YXNVc2VkIiwiY2FudmFzUG9vbCIsImNoZWNraW5nIiwiY2hlY2siLCJleGlzdCIsImtleSIsImxlbmd0aCIsInB1c2giLCJjYyIsImRpcmVjdG9yIiwib2ZmIiwiRGlyZWN0b3IiLCJFVkVOVF9BRlRFUl9EUkFXIiwic3RhcnRDaGVjayIsIm9uIiwiZ2V0Q2FudmFzIiwiY2FjaGVDYW52YXMiLCJkcm9wSW1hZ2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0Q29sb3JpemVkSW1hZ2UiLCJjdmFsIiwiX3ZhbCIsIm5hdGl2ZVVybCIsImNhY2hlIiwicG9wIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0RnJhbWVDYWNoZSIsImdlbmVyYXRlIiwiZHJvcENvbG9yaXplZEltYWdlIiwiX2dsb2JhbEFscGhhIiwiY29udGV4dCIsInNldEdsb2JhbEFscGhhIiwiYWxwaGEiLCJnbG9iYWxBbHBoYSIsInJlc2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFB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b0NDLEVBQXBDLENBQWQ7QUFDQWMsTUFBQUEsU0FBUyxDQUFDa0IsV0FBVixDQUFzQlEsS0FBdEIsRUFBNkJuQixHQUE3QjtBQUNIOztBQUNELFdBQU9tQixLQUFQO0FBQ0gsR0FsRFk7QUFvRGJNLEVBQUFBLGtCQXBEYSw4QkFvRE9uRCxPQXBEUCxFQW9EZ0JDLEtBcERoQixFQW9EdUI7QUFDaEMsUUFBSXlCLEdBQUcsR0FBRzFCLE9BQU8sQ0FBQzRDLFNBQVIsSUFBcUIzQyxLQUFLLENBQUMwQyxJQUFOLEdBQWEsVUFBbEMsQ0FBVjtBQUNBeEIsSUFBQUEsU0FBUyxDQUFDbUIsU0FBVixDQUFvQlosR0FBcEI7QUFDSDtBQXZEWSxDQUFqQixFQTBEQTs7QUFDQSxJQUFJMEIsWUFBWSxHQUFHLENBQUMsQ0FBcEI7O0FBRUEsSUFBSUMsT0FBTyxHQUFHO0FBQ1ZDLEVBQUFBLGNBRFUsMEJBQ005QyxHQUROLEVBQ1crQyxLQURYLEVBQ2tCO0FBQ3hCLFFBQUlILFlBQVksS0FBS0csS0FBckIsRUFBNEI7QUFDeEI7QUFDSDs7QUFFREgsSUFBQUEsWUFBWSxHQUFHRyxLQUFmO0FBQ0EvQyxJQUFBQSxHQUFHLENBQUNnRCxXQUFKLEdBQWtCSixZQUFsQjtBQUNILEdBUlM7QUFVVkssRUFBQUEsS0FWVSxtQkFVRDtBQUNMTCxJQUFBQSxZQUFZLEdBQUcsQ0FBQyxDQUFoQjtBQUNIO0FBWlMsQ0FBZDtBQWVBYixNQUFNLENBQUNDLE9BQVAsQ0FBZWEsT0FBZixHQUF5QkEsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBXSElURSA9ICgyNTU8PDE2KSArICgyNTU8PDgpICsgMjU1O1xuY29uc3QgTUFYX0NBTlZBU19DT1VOVCA9IDMyO1xuXG5mdW5jdGlvbiBjb2xvcml6ZWRGcmFtZSAoY2FudmFzLCB0ZXh0dXJlLCBjb2xvciwgc3gsIHN5LCBzdywgc2gpIHtcbiAgICBsZXQgaW1hZ2UgPSB0ZXh0dXJlLl9pbWFnZTtcblxuICAgIGxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGNhbnZhcy53aWR0aCA9IHN3O1xuICAgIGNhbnZhcy5oZWlnaHQgPSBzaDtcblxuICAgIC8vIERyYXcgY29sb3JcbiAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcbiAgICBjdHguZmlsbFN0eWxlID0gJ3JnYignICsgY29sb3IuciArICcsJyArIGNvbG9yLmcgKyAnLCcgKyBjb2xvci5iICsgJyknO1xuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBzdywgc2gpO1xuXG4gICAgLy8gTXVsdGlwbHkgY29sb3Igd2l0aCB0ZXh0dXJlXG4gICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdtdWx0aXBseSc7XG4gICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgc3gsIHN5LCBzdywgc2gsIDAsIDAsIHN3LCBzaCk7XG5cbiAgICAvLyBDbGlwIG91dCB0cmFuc3BhcmVudCBwaXhlbHNcbiAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJkZXN0aW5hdGlvbi1hdG9wXCI7XG4gICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgc3gsIHN5LCBzdywgc2gsIDAsIDAsIHN3LCBzaCk7XG4gICAgcmV0dXJuIGNhbnZhcztcbn1cblxubGV0IGNhbnZhc01nciA9IHtcbiAgICBjYW52YXNNYXA6IHt9LFxuICAgIGNhbnZhc1VzZWQ6IHt9LFxuICAgIGNhbnZhc1Bvb2w6IFtdLFxuXG4gICAgY2hlY2tpbmc6IGZhbHNlLFxuXG4gICAgY2hlY2sgKCkge1xuICAgICAgICBsZXQgZXhpc3QgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuY2FudmFzVXNlZCkge1xuICAgICAgICAgICAgZXhpc3QgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNhbnZhc1VzZWRba2V5XSkge1xuICAgICAgICAgICAgICAgIGxldCBjYW52YXMgPSB0aGlzLmNhbnZhc01hcFtrZXldO1xuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FudmFzUG9vbC5sZW5ndGggPCAzMikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc1Bvb2wucHVzaChjYW52YXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jYW52YXNNYXBba2V5XTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jYW52YXNVc2VkW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc1VzZWRba2V5XSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZXhpc3QpIHtcbiAgICAgICAgICAgIGNjLmRpcmVjdG9yLm9mZihjYy5EaXJlY3Rvci5FVkVOVF9BRlRFUl9EUkFXLCB0aGlzLmNoZWNrLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGFydENoZWNrICgpIHtcbiAgICAgICAgY2MuZGlyZWN0b3Iub24oY2MuRGlyZWN0b3IuRVZFTlRfQUZURVJfRFJBVywgdGhpcy5jaGVjaywgdGhpcyk7XG4gICAgICAgIHRoaXMuY2hlY2tpbmcgPSB0cnVlO1xuICAgIH0sXG5cbiAgICBnZXRDYW52YXMgKGtleSkge1xuICAgICAgICB0aGlzLmNhbnZhc1VzZWRba2V5XSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhc01hcFtrZXldO1xuICAgIH0sXG5cbiAgICBjYWNoZUNhbnZhcyAoY2FudmFzLCBrZXkpIHtcbiAgICAgICAgdGhpcy5jYW52YXNNYXBba2V5XSA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5jYW52YXNVc2VkW2tleV0gPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRDaGVjaygpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBcbiAgICBkcm9wSW1hZ2UgKGtleSkge1xuICAgICAgICBpZiAodGhpcy5jYW52YXNNYXBba2V5XSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2FudmFzTWFwW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBnZXRDb2xvcml6ZWRJbWFnZSAodGV4dHVyZSwgY29sb3IpIHtcbiAgICAgICAgaWYgKCF0ZXh0dXJlKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHRleHR1cmUud2lkdGggPT09IDAgfHwgdGV4dHVyZS5oZWlnaHQgPT09IDApICByZXR1cm4gdGV4dHVyZS5faW1hZ2U7XG5cbiAgICAgICAgLy8gb3JpZ2luYWwgaW1hZ2VcbiAgICAgICAgbGV0IGN2YWwgPSBjb2xvci5fdmFsICYgMHgwMGZmZmZmZjtcbiAgICAgICAgaWYgKGN2YWwgPT09IFdISVRFKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZS5faW1hZ2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZXQgZnJvbSBjYWNoZVxuICAgICAgICBsZXQga2V5ID0gdGV4dHVyZS5uYXRpdmVVcmwgKyBjdmFsO1xuICAgICAgICBsZXQgY2FjaGUgPSBjYW52YXNNZ3IuZ2V0Q2FudmFzKGtleSk7XG4gICAgICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlID0gY2FudmFzTWdyLmNhbnZhc1Bvb2wucG9wKCkgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIGNvbG9yaXplZEZyYW1lKGNhY2hlLCB0ZXh0dXJlLCBjb2xvciwgMCwgMCwgdGV4dHVyZS53aWR0aCwgdGV4dHVyZS5oZWlnaHQpO1xuICAgICAgICAgICAgY2FudmFzTWdyLmNhY2hlQ2FudmFzKGNhY2hlLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9LFxuXG4gICAgZ2V0RnJhbWVDYWNoZSAodGV4dHVyZSwgY29sb3IsIHN4LCBzeSwgc3csIHNoKSB7XG4gICAgICAgIGlmICghdGV4dHVyZSB8fCAhdGV4dHVyZS5uYXRpdmVVcmwgfHwgc3ggPCAwIHx8IHN5IDwgMCB8fCBzdyA8PSAwIHx8IHNoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGtleSA9IHRleHR1cmUubmF0aXZlVXJsO1xuICAgICAgICBsZXQgZ2VuZXJhdGUgPSBmYWxzZTtcbiAgICAgICAgbGV0IGN2YWwgPSBjb2xvci5fdmFsICYgMHgwMGZmZmZmZjtcbiAgICAgICAgaWYgKGN2YWwgIT09IFdISVRFKSB7XG4gICAgICAgICAgICBrZXkgKz0gY3ZhbDtcbiAgICAgICAgICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ggIT09IDAgfHwgc3kgIT09IDAgJiYgc3cgIT09IHRleHR1cmUud2lkdGggJiYgc2ggIT09IHRleHR1cmUuaGVpZ2h0KSB7XG4gICAgICAgICAgICBrZXkgKz0gJ18nICsgc3ggKyAnXycgKyBzeSArICdfJyArIHN3ICsgJ18nICsgc2g7XG4gICAgICAgICAgICBnZW5lcmF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnZW5lcmF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmUuX2ltYWdlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBnZXQgZnJvbSBjYWNoZVxuICAgICAgICBsZXQgY2FjaGUgPSBjYW52YXNNZ3IuZ2V0Q2FudmFzKGtleSk7XG4gICAgICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlID0gY2FudmFzTWdyLmNhbnZhc1Bvb2wucG9wKCkgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIGNvbG9yaXplZEZyYW1lKGNhY2hlLCB0ZXh0dXJlLCBjb2xvciwgc3gsIHN5LCBzdywgc2gpO1xuICAgICAgICAgICAgY2FudmFzTWdyLmNhY2hlQ2FudmFzKGNhY2hlLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9LFxuXG4gICAgZHJvcENvbG9yaXplZEltYWdlICh0ZXh0dXJlLCBjb2xvcikge1xuICAgICAgICBsZXQga2V5ID0gdGV4dHVyZS5uYXRpdmVVcmwgKyAoY29sb3IuX3ZhbCAmIDB4MDBmZmZmZmYpO1xuICAgICAgICBjYW52YXNNZ3IuZHJvcEltYWdlKGtleSk7XG4gICAgfVxufTtcblxuLy8gY2FjaGUgY29udGV4dCBkYXRhIG9mIGRldmljZS5cbmxldCBfZ2xvYmFsQWxwaGEgPSAtMTtcblxubGV0IGNvbnRleHQgPSB7XG4gICAgc2V0R2xvYmFsQWxwaGEgKGN0eCwgYWxwaGEpIHtcbiAgICAgICAgaWYgKF9nbG9iYWxBbHBoYSA9PT0gYWxwaGEpIHtcbiAgICAgICAgICAgIHJldHVybiBcbiAgICAgICAgfVxuXG4gICAgICAgIF9nbG9iYWxBbHBoYSA9IGFscGhhO1xuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBfZ2xvYmFsQWxwaGE7XG4gICAgfSxcblxuICAgIHJlc2V0ICgpIHtcbiAgICAgICAgX2dsb2JhbEFscGhhID0gLTE7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cy5jb250ZXh0ID0gY29udGV4dDsiXSwic291cmNlUm9vdCI6Ii8ifQ==