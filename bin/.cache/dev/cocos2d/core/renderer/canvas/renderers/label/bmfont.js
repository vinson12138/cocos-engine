
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/label/bmfont.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _bmfont = _interopRequireDefault(require("../../../utils/label/bmfont"));

var _renderData = _interopRequireDefault(require("../render-data"));

var _utils = _interopRequireDefault(require("../utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var CanvasBmfontAssembler = /*#__PURE__*/function (_BmfontAssembler) {
  _inheritsLoose(CanvasBmfontAssembler, _BmfontAssembler);

  function CanvasBmfontAssembler() {
    return _BmfontAssembler.apply(this, arguments) || this;
  }

  var _proto = CanvasBmfontAssembler.prototype;

  _proto.init = function init() {
    this._renderData = new _renderData["default"]();
  };

  _proto.updateColor = function updateColor() {};

  _proto.appendQuad = function appendQuad(comp, texture, rect, rotated, x, y, scale) {
    var renderData = this._renderData;
    var dataOffset = renderData.dataLength;
    renderData.dataLength += 2;
    var verts = renderData.vertices;
    var rectWidth = rect.width,
        rectHeight = rect.height;
    var l, b, r, t;

    if (!rotated) {
      l = rect.x;
      r = rect.x + rectWidth;
      b = rect.y;
      t = rect.y + rectHeight;
      verts[dataOffset].u = l;
      verts[dataOffset].v = b;
      verts[dataOffset + 1].u = r;
      verts[dataOffset + 1].v = t;
    } else {
      l = rect.x;
      r = rect.x + rectHeight;
      b = rect.y;
      t = rect.y + rectWidth;
      verts[dataOffset].u = l;
      verts[dataOffset].v = t;
      verts[dataOffset + 1].u = l;
      verts[dataOffset + 1].v = b;
    }

    verts[dataOffset].x = x;
    verts[dataOffset].y = y - rectHeight * scale;
    verts[dataOffset + 1].x = x + rectWidth * scale;
    verts[dataOffset + 1].y = y;
  };

  _proto.draw = function draw(ctx, comp) {
    var node = comp.node; // Transform

    var matrix = node._worldMatrix;
    var matrixm = matrix.m;
    var a = matrixm[0],
        b = matrixm[1],
        c = matrixm[4],
        d = matrixm[5],
        tx = matrixm[12],
        ty = matrixm[13];
    ctx.transform(a, b, c, d, tx, ty);
    ctx.scale(1, -1); // TODO: handle blend function
    // opacity

    _utils["default"].context.setGlobalAlpha(ctx, node.opacity / 255);

    var tex = comp._frame._texture,
        verts = this._renderData.vertices;

    var image = _utils["default"].getColorizedImage(tex, node._color);

    for (var i = 0, l = verts.length; i < l; i += 2) {
      var x = verts[i].x;
      var y = verts[i].y;
      var w = verts[i + 1].x - x;
      var h = verts[i + 1].y - y;
      y = -y - h;
      var sx = verts[i].u;
      var sy = verts[i].v;
      var sw = verts[i + 1].u - sx;
      var sh = verts[i + 1].v - sy;
      ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
    }

    return 1;
  };

  return CanvasBmfontAssembler;
}(_bmfont["default"]);

exports["default"] = CanvasBmfontAssembler;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,