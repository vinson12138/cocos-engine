
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/platform/CCSAXParser.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2008-2010 Ricardo Quesada
 Copyright (c) 2011-2012 cocos2d-x.org
 Copyright (c) 2013-2016 Chukong Technologies Inc.
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 http://www.cocos2d-x.org

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var js = require('../platform/js');
/**
 * A SAX Parser
 * @class saxParser
 */


cc.SAXParser = function () {
  if (!(CC_EDITOR && Editor.isMainProcess) && window.DOMParser) {
    this._isSupportDOMParser = true;
    this._parser = new DOMParser();
  } else {
    this._isSupportDOMParser = false;
    this._parser = null;
  }
};

cc.SAXParser.prototype = {
  constructor: cc.SAXParser,

  /**
   * @method parse
   * @param {String} xmlTxt
   * @return {Document}
   */
  parse: function parse(xmlTxt) {
    return this._parseXML(xmlTxt);
  },
  _parseXML: function _parseXML(textxml) {
    // get a reference to the requested corresponding xml file
    var xmlDoc;

    if (this._isSupportDOMParser) {
      xmlDoc = this._parser.parseFromString(textxml, "text/xml");
    } else {
      // Internet Explorer (untested!)
      xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
      xmlDoc.async = "false";
      xmlDoc.loadXML(textxml);
    }

    return xmlDoc;
  }
};
/**
 *
 * cc.plistParser is a singleton object for parsing plist files
 * @class plistParser
 * @extends SAXParser
 */

cc.PlistParser = function () {
  cc.SAXParser.call(this);
};

js.extend(cc.PlistParser, cc.SAXParser);
js.mixin(cc.PlistParser.prototype, {
  /**
   * parse a xml string as plist object.
   * @param {String} xmlTxt - plist xml contents
   * @return {*} plist object
   */
  parse: function parse(xmlTxt) {
    var xmlDoc = this._parseXML(xmlTxt);

    var plist = xmlDoc.documentElement;

    if (plist.tagName !== 'plist') {
      cc.warnID(5100);
      return {};
    } // Get first real node


    var node = null;

    for (var i = 0, len = plist.childNodes.length; i < len; i++) {
      node = plist.childNodes[i];
      if (node.nodeType === 1) break;
    }

    xmlDoc = null;
    return this._parseNode(node);
  },
  _parseNode: function _parseNode(node) {
    var data = null,
        tagName = node.tagName;

    if (tagName === "dict") {
      data = this._parseDict(node);
    } else if (tagName === "array") {
      data = this._parseArray(node);
    } else if (tagName === "string") {
      if (node.childNodes.length === 1) data = node.firstChild.nodeValue;else {
        //handle Firefox's 4KB nodeValue limit
        data = "";

        for (var i = 0; i < node.childNodes.length; i++) {
          data += node.childNodes[i].nodeValue;
        }
      }
    } else if (tagName === "false") {
      data = false;
    } else if (tagName === "true") {
      data = true;
    } else if (tagName === "real") {
      data = parseFloat(node.firstChild.nodeValue);
    } else if (tagName === "integer") {
      data = parseInt(node.firstChild.nodeValue, 10);
    }

    return data;
  },
  _parseArray: function _parseArray(node) {
    var data = [];

    for (var i = 0, len = node.childNodes.length; i < len; i++) {
      var child = node.childNodes[i];
      if (child.nodeType !== 1) continue;
      data.push(this._parseNode(child));
    }

    return data;
  },
  _parseDict: function _parseDict(node) {
    var data = {};
    var key = null;

    for (var i = 0, len = node.childNodes.length; i < len; i++) {
      var child = node.childNodes[i];
      if (child.nodeType !== 1) continue; // Grab the key, next noe should be the value

      if (child.tagName === 'key') key = child.firstChild.nodeValue;else data[key] = this._parseNode(child); // Parse the value node
    }

    return data;
  }
});
cc.saxParser = new cc.SAXParser();
/**
 * @type {PlistParser}
 * @name plistParser
 * A Plist Parser
 */

cc.plistParser = new cc.PlistParser();
module.exports = {
  saxParser: cc.saxParser,
  plistParser: cc.plistParser
};
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,