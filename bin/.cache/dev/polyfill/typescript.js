
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/polyfill/typescript.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global global, define, System, Reflect, Promise */
// tslib 2.0.3
var extendStatics = Object.setPrototypeOf || {
  __proto__: []
} instanceof Array && function (d, b) {
  d.__proto__ = b;
} || function (d, b) {
  for (var p in b) {
    if (b.hasOwnProperty(p)) d[p] = b[p];
  }
};

window.__extends = function (d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

window.__assign = Object.assign || function (t) {
  for (var s, i = 1, n = arguments.length; i < n; i++) {
    s = arguments[i];

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
  }

  return t;
};

window.__rest = function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

window.__decorate = function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

window.__param = function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

window.__metadata = function (metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
};

window.__awaiter = function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

window.__generator = function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

window.__exportStar = function (m, o) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  }
};

window.__createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};

window.__values = function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

window.__read = function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

window.__spread = function () {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read(arguments[i]));
  }

  return ar;
};

window.__spreadArrays = function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

window.__await = function (v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
};

window.__asyncGenerator = function (thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
};

window.__asyncDelegator = function (o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
};

window.__asyncValues = function (o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
};

window.__makeTemplateObject = function (cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
};

var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};

window.__importStar = function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

window.__importDefault = function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

window.__classPrivateFieldGet = function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

window.__classPrivateFieldSet = function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXYvcG9seWZpbGwvdHlwZXNjcmlwdC5qcyJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImQiLCJiIiwicCIsImhhc093blByb3BlcnR5Iiwid2luZG93IiwiX19leHRlbmRzIiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNyZWF0ZSIsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNhbGwiLCJfX3Jlc3QiLCJlIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiYyIsInIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiX19tZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm1ldGFkYXRhIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsImYiLCJ5IiwiZyIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsInYiLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsInB1c2giLCJfX2V4cG9ydFN0YXIiLCJtIiwibyIsIl9fY3JlYXRlQmluZGluZyIsImsiLCJrMiIsInVuZGVmaW5lZCIsImVudW1lcmFibGUiLCJnZXQiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZCIsImNvbmNhdCIsIl9fc3ByZWFkQXJyYXlzIiwiaWwiLCJhIiwiaiIsImpsIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwicSIsInJlc3VtZSIsInNldHRsZSIsImZ1bGZpbGwiLCJzaGlmdCIsIl9fYXN5bmNEZWxlZ2F0b3IiLCJfX2FzeW5jVmFsdWVzIiwiX19tYWtlVGVtcGxhdGVPYmplY3QiLCJjb29rZWQiLCJyYXciLCJfX3NldE1vZHVsZURlZmF1bHQiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJfX2VzTW9kdWxlIiwiX19pbXBvcnREZWZhdWx0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwicHJpdmF0ZU1hcCIsImhhcyIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJzZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBRUE7QUFFQSxJQUFJQSxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsY0FBUCxJQUNmO0FBQUVDLEVBQUFBLFNBQVMsRUFBRTtBQUFiLGFBQTZCQyxLQUE3QixJQUFzQyxVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFBRUQsRUFBQUEsQ0FBQyxDQUFDRixTQUFGLEdBQWNHLENBQWQ7QUFBa0IsQ0FEM0QsSUFFaEIsVUFBVUQsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQUUsT0FBSyxJQUFJQyxDQUFULElBQWNELENBQWQ7QUFBaUIsUUFBSUEsQ0FBQyxDQUFDRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixDQUFDLENBQUNFLENBQUQsQ0FBRCxHQUFPRCxDQUFDLENBQUNDLENBQUQsQ0FBUjtBQUExQztBQUF3RCxDQUY5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KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBnbG9iYWwsIGRlZmluZSwgU3lzdGVtLCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG4vLyB0c2xpYiAyLjAuM1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG5cclxud2luZG93Ll9fZXh0ZW5kcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcblxyXG53aW5kb3cuX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuXHJcbndpbmRvdy5fX3Jlc3QgPSBmdW5jdGlvbiAocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcblxyXG53aW5kb3cuX19kZWNvcmF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxuXHJcbndpbmRvdy5fX3BhcmFtID0gZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcblxyXG53aW5kb3cuX19tZXRhZGF0YSA9IGZ1bmN0aW9uIChtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufTtcclxuXHJcbndpbmRvdy5fX2F3YWl0ZXIgPSBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxud2luZG93Ll9fZ2VuZXJhdG9yID0gZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5cclxud2luZG93Ll9fZXhwb3J0U3RhciA9IGZ1bmN0aW9uKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufTtcclxuXHJcbndpbmRvdy5fX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG53aW5kb3cuX192YWx1ZXMgPSBmdW5jdGlvbiAobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn07XHJcblxyXG53aW5kb3cuX19yZWFkID0gZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufTtcclxuXHJcbndpbmRvdy5fX3NwcmVhZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufTtcclxuXHJcbndpbmRvdy5fX3NwcmVhZEFycmF5cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxud2luZG93Ll9fYXdhaXQgPSBmdW5jdGlvbiAodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn07XHJcblxyXG53aW5kb3cuX19hc3luY0dlbmVyYXRvciA9IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7ICB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn07XHJcblxyXG53aW5kb3cuX19hc3luY0RlbGVnYXRvciA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn07XHJcblxyXG53aW5kb3cuX19hc3luY1ZhbHVlcyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufTtcclxuXHJcbndpbmRvdy5fX21ha2VUZW1wbGF0ZU9iamVjdCA9IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxud2luZG93Ll9faW1wb3J0U3RhciA9IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbndpbmRvdy5fX2ltcG9ydERlZmF1bHQgPSBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuXHJcbndpbmRvdy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gZnVuY3Rpb24gKHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufTtcclxuXHJcbndpbmRvdy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gZnVuY3Rpb24gKHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn07Il0sInNvdXJjZVJvb3QiOiIvIn0=